// <auto-generated />
using System;
using EasyLease.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EasyLease.WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210905220620_Added VisitedUser properti to User model")]
    partial class AddedVisitedUserpropertitoUsermodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EasyLease.Entities.Models.Advert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<string>("AdvertTypeId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Area")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("District")
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("EndOfLease")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfStoreys")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Region")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SettlementName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SettlementTypeId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartOfLease")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<int?>("Storey")
                        .HasColumnType("integer");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("StreetTypeId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvertTypeId");

                    b.HasIndex("SettlementTypeId");

                    b.HasIndex("StreetTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("Region", "District");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1d4c053-49b6-410c-bc78-2d54a9991870"),
                            AdvertTypeId = "квартира",
                            ApartmentNumber = 5,
                            Area = 60,
                            CreatedAd = new DateTime(2021, 9, 6, 8, 6, 19, 811, DateTimeKind.Utc).AddTicks(2113),
                            Description = "Есть все необходимое",
                            District = "Сумской",
                            HouseNumber = "10",
                            NumberOfRooms = 2,
                            NumberOfStoreys = 9,
                            Price = 100m,
                            PriceType = "PricePerDay",
                            Region = "Сумская",
                            SettlementName = "Сумы",
                            SettlementTypeId = "город",
                            StartOfLease = new DateTime(2021, 9, 6, 8, 6, 19, 811, DateTimeKind.Utc).AddTicks(2113),
                            Status = "Active",
                            Storey = 3,
                            StreetName = "Соборна",
                            StreetTypeId = "улица",
                            Title = "Сдам 2-х комнатную квартиру",
                            UserId = new Guid("c1d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            Id = new Guid("a2d4c053-49b6-410c-bc78-2d54a9991870"),
                            AdvertTypeId = "дом",
                            Area = 280,
                            CreatedAd = new DateTime(2021, 9, 5, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Description = "Дом 280 м2. Элитный дизайн.",
                            District = "Сумской",
                            HouseNumber = "8",
                            NumberOfRooms = 8,
                            NumberOfStoreys = 2,
                            Price = 3000m,
                            PriceType = "PricePerMonth",
                            Region = "Сумская",
                            SettlementName = "Сумы",
                            SettlementTypeId = "город",
                            StartOfLease = new DateTime(2021, 9, 5, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Status = "Active",
                            StreetName = "Мира",
                            StreetTypeId = "улица",
                            Title = "Сдам дом",
                            UserId = new Guid("c2d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            Id = new Guid("a3d4c053-49b6-410c-bc78-2d54a9991870"),
                            AdvertTypeId = "квартира",
                            ApartmentNumber = 7,
                            Area = 45,
                            CreatedAd = new DateTime(2021, 9, 5, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Description = "Есть все кроме холодильника",
                            District = "Прилуцкий",
                            HouseNumber = "25",
                            NumberOfRooms = 1,
                            NumberOfStoreys = 9,
                            Price = 50m,
                            PriceType = "PricePerDay",
                            Region = "Черниговская",
                            SettlementName = "Прилуки",
                            SettlementTypeId = "город",
                            StartOfLease = new DateTime(2021, 9, 5, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Status = "Active",
                            Storey = 7,
                            StreetName = "Вовка",
                            StreetTypeId = "улица",
                            Title = "Сдам 1 комнатную квартиру",
                            UserId = new Guid("c3d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            Id = new Guid("a4d4c053-49b6-410c-bc78-2d54a9991870"),
                            AdvertTypeId = "квартира",
                            ApartmentNumber = 13,
                            Area = 100,
                            CreatedAd = new DateTime(2021, 9, 6, 3, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Description = "Сделанный свежий ремонт",
                            District = "Сумской",
                            HouseNumber = "2",
                            NumberOfRooms = 5,
                            NumberOfStoreys = 5,
                            Price = 300m,
                            PriceType = "PricePerDay",
                            Region = "Сумская",
                            SettlementName = "Сумы",
                            SettlementTypeId = "город",
                            StartOfLease = new DateTime(2021, 9, 6, 3, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Status = "Active",
                            Storey = 5,
                            StreetName = "Супруна",
                            StreetTypeId = "улица",
                            Title = "Сдам 5-х комнатную квартиру",
                            UserId = new Guid("c2d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            Id = new Guid("a5d4c053-49b6-410c-bc78-2d54a9991870"),
                            AdvertTypeId = "комната",
                            ApartmentNumber = 5,
                            Area = 25,
                            CreatedAd = new DateTime(2021, 9, 8, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Description = "Все уютненько.",
                            District = "Сумской",
                            HouseNumber = "31",
                            NumberOfRooms = 1,
                            NumberOfStoreys = 5,
                            Price = 500m,
                            PriceType = "PricePerMonth",
                            Region = "Сумская",
                            SettlementName = "Сумы",
                            SettlementTypeId = "город",
                            StartOfLease = new DateTime(2021, 9, 8, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Status = "Active",
                            Storey = 3,
                            StreetName = "Стрелки",
                            StreetTypeId = "набережная",
                            Title = "Сдам комнату в общежитие",
                            UserId = new Guid("c3d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            Id = new Guid("a6d4c053-49b6-410c-bc78-2d54a9991870"),
                            AdvertTypeId = "квартира",
                            ApartmentNumber = 5,
                            Area = 70,
                            CreatedAd = new DateTime(2021, 9, 6, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Description = "Евро ремонт.",
                            District = "Сумской",
                            HouseNumber = "2",
                            NumberOfRooms = 3,
                            NumberOfStoreys = 9,
                            Price = 150m,
                            PriceType = "PricePerDay",
                            Region = "Сумская",
                            SettlementName = "Сумы",
                            SettlementTypeId = "город",
                            StartOfLease = new DateTime(2021, 9, 6, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Status = "Active",
                            Storey = 8,
                            StreetName = "Соборна",
                            StreetTypeId = "улица",
                            Title = "Сдам 3-х комнатную квартиру",
                            UserId = new Guid("c2d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            Id = new Guid("a7d4c053-49b6-410c-bc78-2d54a9991870"),
                            AdvertTypeId = "квартира",
                            ApartmentNumber = 7,
                            Area = 85,
                            CreatedAd = new DateTime(2021, 9, 7, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Description = "Сделан культурный ремонт",
                            District = "Новгород-Северский",
                            HouseNumber = "1",
                            NumberOfRooms = 4,
                            NumberOfStoreys = 9,
                            Price = 300m,
                            PriceType = "PricePerDay",
                            Region = "Черниговская",
                            SettlementName = "Новгород",
                            SettlementTypeId = "город",
                            StartOfLease = new DateTime(2021, 9, 7, 22, 6, 19, 812, DateTimeKind.Utc).AddTicks(2113),
                            Status = "Active",
                            Storey = 2,
                            StreetName = "Победы",
                            StreetTypeId = "улица",
                            Title = "Сдам 4-х комнатную квартиру",
                            UserId = new Guid("c2d4c053-49b6-410c-bc78-2d54a9991870")
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.AdvertComfort", b =>
                {
                    b.Property<Guid>("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<string>("ComfortId")
                        .HasColumnType("character varying(50)");

                    b.HasKey("AdvertId", "ComfortId");

                    b.HasIndex("ComfortId");

                    b.ToTable("AdvertComfort");

                    b.HasData(
                        new
                        {
                            AdvertId = new Guid("a1d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Холодильник"
                        },
                        new
                        {
                            AdvertId = new Guid("a1d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Кондиционер"
                        },
                        new
                        {
                            AdvertId = new Guid("a1d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Телевизор"
                        },
                        new
                        {
                            AdvertId = new Guid("a2d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Холодильник"
                        },
                        new
                        {
                            AdvertId = new Guid("a2d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Посуда и столовые приборы"
                        },
                        new
                        {
                            AdvertId = new Guid("a2d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Духовка"
                        },
                        new
                        {
                            AdvertId = new Guid("a3d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Кастрюли"
                        },
                        new
                        {
                            AdvertId = new Guid("a3d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Диван"
                        },
                        new
                        {
                            AdvertId = new Guid("a4d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Кухонная мебель"
                        },
                        new
                        {
                            AdvertId = new Guid("a4d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Кофеварка"
                        },
                        new
                        {
                            AdvertId = new Guid("a4d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Мягкая мебель"
                        },
                        new
                        {
                            AdvertId = new Guid("a4d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Wi-Fi"
                        },
                        new
                        {
                            AdvertId = new Guid("a5d4c053-49b6-410c-bc78-2d54a9991870"),
                            ComfortId = "Чайник"
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.AdvertTag", b =>
                {
                    b.Property<Guid>("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<string>("TagId")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("CreatedTag")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AdvertId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("AdvertTag");

                    b.HasData(
                        new
                        {
                            AdvertId = new Guid("a1d4c053-49b6-410c-bc78-2d54a9991870"),
                            TagId = "квартира",
                            CreatedTag = new DateTime(2021, 9, 5, 22, 6, 19, 813, DateTimeKind.Utc).AddTicks(2114)
                        },
                        new
                        {
                            AdvertId = new Guid("a1d4c053-49b6-410c-bc78-2d54a9991870"),
                            TagId = "Евро ремонт",
                            CreatedTag = new DateTime(2021, 9, 5, 22, 6, 19, 813, DateTimeKind.Utc).AddTicks(2114)
                        },
                        new
                        {
                            AdvertId = new Guid("a2d4c053-49b6-410c-bc78-2d54a9991870"),
                            TagId = "дом",
                            CreatedTag = new DateTime(2021, 9, 5, 22, 6, 19, 813, DateTimeKind.Utc).AddTicks(2114)
                        },
                        new
                        {
                            AdvertId = new Guid("a3d4c053-49b6-410c-bc78-2d54a9991870"),
                            TagId = "1 комнатная",
                            CreatedTag = new DateTime(2021, 9, 5, 22, 6, 19, 813, DateTimeKind.Utc).AddTicks(2114)
                        },
                        new
                        {
                            AdvertId = new Guid("a4d4c053-49b6-410c-bc78-2d54a9991870"),
                            TagId = "5 комнатная",
                            CreatedTag = new DateTime(2021, 9, 5, 22, 6, 19, 813, DateTimeKind.Utc).AddTicks(2114)
                        },
                        new
                        {
                            AdvertId = new Guid("a4d4c053-49b6-410c-bc78-2d54a9991870"),
                            TagId = "свежий ремонт",
                            CreatedTag = new DateTime(2021, 9, 5, 22, 6, 19, 813, DateTimeKind.Utc).AddTicks(2114)
                        },
                        new
                        {
                            AdvertId = new Guid("a5d4c053-49b6-410c-bc78-2d54a9991870"),
                            TagId = "комната",
                            CreatedTag = new DateTime(2021, 9, 5, 22, 6, 19, 813, DateTimeKind.Utc).AddTicks(2114)
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.AdvertType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("AdvertTypeId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AdvertType");

                    b.HasData(
                        new
                        {
                            Id = "дом"
                        },
                        new
                        {
                            Id = "квартира"
                        },
                        new
                        {
                            Id = "комната"
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.Comfort", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ComfortId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Comforts");

                    b.HasData(
                        new
                        {
                            Id = "Холодильник"
                        },
                        new
                        {
                            Id = "ПК"
                        },
                        new
                        {
                            Id = "Кондиционер"
                        },
                        new
                        {
                            Id = "Телевизор"
                        },
                        new
                        {
                            Id = "Стиральная машина"
                        },
                        new
                        {
                            Id = "Wi-Fi"
                        },
                        new
                        {
                            Id = "Микроволновая печь"
                        },
                        new
                        {
                            Id = "Посуда и столовые приборы"
                        },
                        new
                        {
                            Id = "Плита"
                        },
                        new
                        {
                            Id = "Духовка"
                        },
                        new
                        {
                            Id = "Кофеварка"
                        },
                        new
                        {
                            Id = "Фен"
                        },
                        new
                        {
                            Id = "Утюг"
                        },
                        new
                        {
                            Id = "Переносный обогревавтель"
                        },
                        new
                        {
                            Id = "Кабельное ТВ"
                        },
                        new
                        {
                            Id = "Шкаф"
                        },
                        new
                        {
                            Id = "Чайник"
                        },
                        new
                        {
                            Id = "Морозилка"
                        },
                        new
                        {
                            Id = "Диван"
                        },
                        new
                        {
                            Id = "Кровать"
                        },
                        new
                        {
                            Id = "Кухонная мебель"
                        },
                        new
                        {
                            Id = "Мягкая мебель"
                        },
                        new
                        {
                            Id = "Сушитель белья"
                        },
                        new
                        {
                            Id = "Посудомоющая машина"
                        },
                        new
                        {
                            Id = "Центральное отопление"
                        },
                        new
                        {
                            Id = "Кастрюли"
                        },
                        new
                        {
                            Id = "Сковородки"
                        },
                        new
                        {
                            Id = "Электроплита"
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.FavoriteAdvert", b =>
                {
                    b.Property<Guid>("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AdvertId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteAdvert");

                    b.HasData(
                        new
                        {
                            AdvertId = new Guid("a1d4c053-49b6-410c-bc78-2d54a9991870"),
                            UserId = new Guid("c3d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            AdvertId = new Guid("a1d4c053-49b6-410c-bc78-2d54a9991870"),
                            UserId = new Guid("c2d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            AdvertId = new Guid("a2d4c053-49b6-410c-bc78-2d54a9991870"),
                            UserId = new Guid("c1d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            AdvertId = new Guid("a4d4c053-49b6-410c-bc78-2d54a9991870"),
                            UserId = new Guid("c3d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            AdvertId = new Guid("a5d4c053-49b6-410c-bc78-2d54a9991870"),
                            UserId = new Guid("c3d4c053-49b6-410c-bc78-2d54a9991870")
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("EasyLease.Entities.Models.Location", b =>
                {
                    b.Property<string>("Region")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("District")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Region", "District");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Region = "Винницкая",
                            District = "Винницкий"
                        },
                        new
                        {
                            Region = "Винницкая",
                            District = "Гайсинский"
                        },
                        new
                        {
                            Region = "Винницкая",
                            District = "Жмеринский"
                        },
                        new
                        {
                            Region = "Винницкая",
                            District = "Могилев-Подольский"
                        },
                        new
                        {
                            Region = "Винницкая",
                            District = "Тульчинский"
                        },
                        new
                        {
                            Region = "Винницкая",
                            District = "Хмельницкий"
                        },
                        new
                        {
                            Region = "Волынская",
                            District = "Владимир-Волынский"
                        },
                        new
                        {
                            Region = "Волынская",
                            District = "Камень-Каширский"
                        },
                        new
                        {
                            Region = "Волынская",
                            District = "Ковальский"
                        },
                        new
                        {
                            Region = "Волынская",
                            District = "Луцкий"
                        },
                        new
                        {
                            Region = "Днепропетровская",
                            District = "Днепровский"
                        },
                        new
                        {
                            Region = "Днепропетровская",
                            District = "Каменский"
                        },
                        new
                        {
                            Region = "Днепропетровская",
                            District = "Криворожский"
                        },
                        new
                        {
                            Region = "Днепропетровская",
                            District = "Никопольский"
                        },
                        new
                        {
                            Region = "Днепропетровская",
                            District = "Новомосковский"
                        },
                        new
                        {
                            Region = "Днепропетровская",
                            District = "Павлоградский"
                        },
                        new
                        {
                            Region = "Днепропетровская",
                            District = "Синельниковский"
                        },
                        new
                        {
                            Region = "Донецкая",
                            District = "Бахмутский"
                        },
                        new
                        {
                            Region = "Донецкая",
                            District = "Волновахский"
                        },
                        new
                        {
                            Region = "Донецкая",
                            District = "Горловский"
                        },
                        new
                        {
                            Region = "Донецкая",
                            District = "Донецкий"
                        },
                        new
                        {
                            Region = "Донецкая",
                            District = "Кальмиусский"
                        },
                        new
                        {
                            Region = "Донецкая",
                            District = "Краматорский"
                        },
                        new
                        {
                            Region = "Донецкая",
                            District = "Мариупольский"
                        },
                        new
                        {
                            Region = "Донецкая",
                            District = "Покровский"
                        },
                        new
                        {
                            Region = "Житомирская",
                            District = "Бердичевский"
                        },
                        new
                        {
                            Region = "Житомирская",
                            District = "Житомирский"
                        },
                        new
                        {
                            Region = "Житомирская",
                            District = "Коростенский"
                        },
                        new
                        {
                            Region = "Житомирская",
                            District = "Новоград-Волынский"
                        },
                        new
                        {
                            Region = "Закарпатская",
                            District = "Береговский"
                        },
                        new
                        {
                            Region = "Закарпатская",
                            District = "Мукачевский"
                        },
                        new
                        {
                            Region = "Закарпатская",
                            District = "Раховский"
                        },
                        new
                        {
                            Region = "Закарпатская",
                            District = "Тячевский"
                        },
                        new
                        {
                            Region = "Закарпатская",
                            District = "Ужгородский"
                        },
                        new
                        {
                            Region = "Закарпатская",
                            District = "Хустский"
                        },
                        new
                        {
                            Region = "Запорожская",
                            District = "Бердянский"
                        },
                        new
                        {
                            Region = "Запорожская",
                            District = "Васильевский"
                        },
                        new
                        {
                            Region = "Запорожская",
                            District = "Запорожский"
                        },
                        new
                        {
                            Region = "Запорожская",
                            District = "Мелитопольский"
                        },
                        new
                        {
                            Region = "Запорожская",
                            District = "Пологовский"
                        },
                        new
                        {
                            Region = "Ивано-Франковская",
                            District = "Верховинский"
                        },
                        new
                        {
                            Region = "Ивано-Франковская",
                            District = "Ивано-Франковский"
                        },
                        new
                        {
                            Region = "Ивано-Франковская",
                            District = "Калушский"
                        },
                        new
                        {
                            Region = "Ивано-Франковская",
                            District = "Коломыйский"
                        },
                        new
                        {
                            Region = "Ивано-Франковская",
                            District = "Косовский"
                        },
                        new
                        {
                            Region = "Ивано-Франковская",
                            District = "Надворнянский"
                        },
                        new
                        {
                            Region = "Киевская",
                            District = "Белоцерковский"
                        },
                        new
                        {
                            Region = "Киевская",
                            District = "Бориспольский"
                        },
                        new
                        {
                            Region = "Киевская",
                            District = "Броварской"
                        },
                        new
                        {
                            Region = "Киевская",
                            District = "Бучанский"
                        },
                        new
                        {
                            Region = "Киевская",
                            District = "Вышгородский"
                        },
                        new
                        {
                            Region = "Киевская",
                            District = "Обуховский"
                        },
                        new
                        {
                            Region = "Киевская",
                            District = "Фастовский"
                        },
                        new
                        {
                            Region = "Кировоградская",
                            District = "Головановский"
                        },
                        new
                        {
                            Region = "Кировоградская",
                            District = "Кропивницкий"
                        },
                        new
                        {
                            Region = "Кировоградская",
                            District = "Новоукраинский"
                        },
                        new
                        {
                            Region = "Кировоградская",
                            District = "Александрийский"
                        },
                        new
                        {
                            Region = "Луганская",
                            District = "Алчевский"
                        },
                        new
                        {
                            Region = "Луганская",
                            District = "Довжанский"
                        },
                        new
                        {
                            Region = "Луганская",
                            District = "Луганский"
                        },
                        new
                        {
                            Region = "Луганская",
                            District = "Ровеньковский"
                        },
                        new
                        {
                            Region = "Луганская",
                            District = "Сватовский"
                        },
                        new
                        {
                            Region = "Луганская",
                            District = "Северодонецкий"
                        },
                        new
                        {
                            Region = "Луганская",
                            District = "Старобельский"
                        },
                        new
                        {
                            Region = "Луганская",
                            District = "Счастьенский"
                        },
                        new
                        {
                            Region = "Львовская",
                            District = "Дрогобычский"
                        },
                        new
                        {
                            Region = "Львовская",
                            District = "Золочевский"
                        },
                        new
                        {
                            Region = "Львовская",
                            District = "Львовский"
                        },
                        new
                        {
                            Region = "Львовская",
                            District = "Самборский"
                        },
                        new
                        {
                            Region = "Львовская",
                            District = "Стрыйский "
                        },
                        new
                        {
                            Region = "Львовская",
                            District = "Червоноградский"
                        },
                        new
                        {
                            Region = "Львовская",
                            District = "Яворовский"
                        },
                        new
                        {
                            Region = "Николаевская",
                            District = "Баштанский"
                        },
                        new
                        {
                            Region = "Николаевская",
                            District = "Вознесенский"
                        },
                        new
                        {
                            Region = "Николаевская",
                            District = "Николаевский"
                        },
                        new
                        {
                            Region = "Николаевская",
                            District = "Первомайский"
                        },
                        new
                        {
                            Region = "Одесская",
                            District = "Березовский"
                        },
                        new
                        {
                            Region = "Одесская",
                            District = "Белгород-Днестровский"
                        },
                        new
                        {
                            Region = "Одесская",
                            District = "Болградский"
                        },
                        new
                        {
                            Region = "Одесская",
                            District = "Измаильский"
                        },
                        new
                        {
                            Region = "Одесская",
                            District = "Одесский"
                        },
                        new
                        {
                            Region = "Одесская",
                            District = "Подольский"
                        },
                        new
                        {
                            Region = "Одесская",
                            District = "Раздельнянский"
                        },
                        new
                        {
                            Region = "Полтавская",
                            District = "Кременчугский"
                        },
                        new
                        {
                            Region = "Полтавская",
                            District = "Лубенский"
                        },
                        new
                        {
                            Region = "Полтавская",
                            District = "Миргородский"
                        },
                        new
                        {
                            Region = "Полтавская",
                            District = "Полтавский"
                        },
                        new
                        {
                            Region = "Ровенская",
                            District = "Вараский"
                        },
                        new
                        {
                            Region = "Ровенская",
                            District = "Дубенский"
                        },
                        new
                        {
                            Region = "Ровенская",
                            District = "Ровенский"
                        },
                        new
                        {
                            Region = "Ровенская",
                            District = "Сарненский"
                        },
                        new
                        {
                            Region = "Сумская",
                            District = "Конотопский"
                        },
                        new
                        {
                            Region = "Сумская",
                            District = "Ахтырский"
                        },
                        new
                        {
                            Region = "Сумская",
                            District = "Роменский"
                        },
                        new
                        {
                            Region = "Сумская",
                            District = "Сумской"
                        },
                        new
                        {
                            Region = "Сумская",
                            District = "Шосткинский"
                        },
                        new
                        {
                            Region = "Тернопольская",
                            District = "Кременецкий"
                        },
                        new
                        {
                            Region = "Тернопольская",
                            District = "Тернопольский"
                        },
                        new
                        {
                            Region = "Тернопольская",
                            District = "Чертковский"
                        },
                        new
                        {
                            Region = "Харьковская",
                            District = "Богодуховский"
                        },
                        new
                        {
                            Region = "Харьковская",
                            District = "Изюмский"
                        },
                        new
                        {
                            Region = "Харьковская",
                            District = "Красноградский"
                        },
                        new
                        {
                            Region = "Харьковская",
                            District = "Купянский"
                        },
                        new
                        {
                            Region = "Харьковская",
                            District = "Лозовский"
                        },
                        new
                        {
                            Region = "Харьковская",
                            District = "Харьковский"
                        },
                        new
                        {
                            Region = "Харьковская",
                            District = "Чугуевский"
                        },
                        new
                        {
                            Region = "Херсонская",
                            District = "Бериславский"
                        },
                        new
                        {
                            Region = "Херсонская",
                            District = "Генический"
                        },
                        new
                        {
                            Region = "Херсонская",
                            District = "Каховский"
                        },
                        new
                        {
                            Region = "Херсонская",
                            District = "Скадовский"
                        },
                        new
                        {
                            Region = "Херсонская",
                            District = "Херсонский"
                        },
                        new
                        {
                            Region = "Хмельницкая",
                            District = "Каменец-Подольский"
                        },
                        new
                        {
                            Region = "Хмельницкая",
                            District = "Хмельницкий"
                        },
                        new
                        {
                            Region = "Хмельницкая",
                            District = "Шепетовский"
                        },
                        new
                        {
                            Region = "Черкасская",
                            District = "Звенигородский"
                        },
                        new
                        {
                            Region = "Черкасская",
                            District = "Золотоношский"
                        },
                        new
                        {
                            Region = "Черкасская",
                            District = "Уманский"
                        },
                        new
                        {
                            Region = "Черкасская",
                            District = "Черкасский"
                        },
                        new
                        {
                            Region = "Черновицкая",
                            District = "Вижницкий"
                        },
                        new
                        {
                            Region = "Черновицкая",
                            District = "Днестровский"
                        },
                        new
                        {
                            Region = "Черновицкая",
                            District = "Черновицкий"
                        },
                        new
                        {
                            Region = "Черниговская",
                            District = "Корюковский"
                        },
                        new
                        {
                            Region = "Черниговская",
                            District = "Нежинский"
                        },
                        new
                        {
                            Region = "Черниговская",
                            District = "Новгород-Северский"
                        },
                        new
                        {
                            Region = "Черниговская",
                            District = "Прилуцкий"
                        },
                        new
                        {
                            Region = "Черниговская",
                            District = "Черниговский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Бахчисарайский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Белогорский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Джанкойский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Евпаторийский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Керченский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Курманский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Перекопский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Симферопольский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Феодосийский"
                        },
                        new
                        {
                            Region = "Автономная республика Крым",
                            District = "Ялтинский"
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.SettlementType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("SettlementTypeId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SettlementType");

                    b.HasData(
                        new
                        {
                            Id = "село"
                        },
                        new
                        {
                            Id = "смт"
                        },
                        new
                        {
                            Id = "город"
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.StreetType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("StreetTypeId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("StreetType");

                    b.HasData(
                        new
                        {
                            Id = "улица"
                        },
                        new
                        {
                            Id = "аллея"
                        },
                        new
                        {
                            Id = "бульвар"
                        },
                        new
                        {
                            Id = "взвоз"
                        },
                        new
                        {
                            Id = "въезд"
                        },
                        new
                        {
                            Id = "заезд"
                        },
                        new
                        {
                            Id = "кольцо"
                        },
                        new
                        {
                            Id = "магистраль"
                        },
                        new
                        {
                            Id = "набережная"
                        },
                        new
                        {
                            Id = "переулок"
                        },
                        new
                        {
                            Id = "площадь"
                        },
                        new
                        {
                            Id = "проезд"
                        },
                        new
                        {
                            Id = "проспект"
                        },
                        new
                        {
                            Id = "проулок"
                        },
                        new
                        {
                            Id = "разъезд"
                        },
                        new
                        {
                            Id = "спуск"
                        },
                        new
                        {
                            Id = "съезд"
                        },
                        new
                        {
                            Id = "тупик"
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("TagId")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "квартира"
                        },
                        new
                        {
                            Id = "Евро ремонт"
                        },
                        new
                        {
                            Id = "дом"
                        },
                        new
                        {
                            Id = "1 комнатная"
                        },
                        new
                        {
                            Id = "5 комнатная"
                        },
                        new
                        {
                            Id = "свежий ремонт"
                        },
                        new
                        {
                            Id = "комната"
                        });
                });

            modelBuilder.Entity("EasyLease.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("bytea")
                        .HasMaxLength(126976);

                    b.Property<string>("Biography")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedUser")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecondName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("ThirdName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedUser")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("VisitedUser")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7778a881-221a-1e7d-a208-0118ccc088e7"),
                            AccessFailedCount = 0,
                            Biography = "",
                            ConcurrencyStamp = "d5c14d17-980e-4d86-9e05-45a23a302841",
                            CreatedUser = new DateTime(2021, 9, 5, 22, 6, 19, 781, DateTimeKind.Utc).AddTicks(2096),
                            Email = "ELAdmin@com.ua",
                            EmailConfirmed = true,
                            FirstName = "Master",
                            LockoutEnabled = false,
                            NormalizedUserName = "MASTERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEIVARMa18ptvA+lY9/elEVKE2vJDEOWNUZE5WqtRFxgwONIQtvuFy1uLL3qPKiHjGA==",
                            PhoneNumberConfirmed = false,
                            SecondName = "Admin",
                            SecurityStamp = "564129ab-28ca-40e5-b67b-63228b05c34e",
                            ThirdName = "",
                            TwoFactorEnabled = false,
                            UserName = "MasterAdmin",
                            VisitedUser = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c1d4c053-49b6-410c-bc78-2d54a9991870"),
                            AccessFailedCount = 0,
                            Biography = "Просто собственник",
                            ConcurrencyStamp = "49b438d6-8e88-4887-a250-374fbc1bf3aa",
                            CreatedUser = new DateTime(2021, 9, 6, 22, 6, 19, 807, DateTimeKind.Utc).AddTicks(2111),
                            Email = "max@com.ua",
                            EmailConfirmed = false,
                            FirstName = "Максим",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecondName = "",
                            ThirdName = "",
                            TwoFactorEnabled = false,
                            VisitedUser = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c2d4c053-49b6-410c-bc78-2d54a9991870"),
                            AccessFailedCount = 0,
                            Biography = "",
                            ConcurrencyStamp = "fdd58510-a997-4b23-9e08-a35cb09d18fe",
                            CreatedUser = new DateTime(2021, 9, 5, 22, 6, 19, 807, DateTimeKind.Utc).AddTicks(2111),
                            Email = "Nik@com.ua",
                            EmailConfirmed = false,
                            FirstName = "Nik",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            VisitedUser = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c3d4c053-49b6-410c-bc78-2d54a9991870"),
                            AccessFailedCount = 0,
                            Biography = "Занимаюсь сдачей недвижимости",
                            ConcurrencyStamp = "d03f6016-71e5-4f9b-9c77-8d84b93ba482",
                            CreatedUser = new DateTime(2021, 9, 6, 1, 6, 19, 807, DateTimeKind.Utc).AddTicks(2111),
                            Email = "vlad@com.ua",
                            EmailConfirmed = false,
                            FirstName = "Влад",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            VisitedUser = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d9b7113-a8f8-6035-99a7-a20dd400f6a3"),
                            ConcurrencyStamp = "41683f80-4bd6-4860-9064-269056bb8bff",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("48a4210f-3ce5-48ba-9461-80283ed1d94d"),
                            ConcurrencyStamp = "3dce83b9-e786-45cc-b585-4feb5b012ca3",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = new Guid("7771d881-221a-1e7d-b208-0118dcc088e1"),
                            ConcurrencyStamp = "71bef788-762d-4332-b177-458c15d3f656",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7778a881-221a-1e7d-a208-0118ccc088e7"),
                            RoleId = new Guid("7771d881-221a-1e7d-b208-0118dcc088e1")
                        },
                        new
                        {
                            UserId = new Guid("c1d4c053-49b6-410c-bc78-2d54a9991870"),
                            RoleId = new Guid("6d9b7113-a8f8-6035-99a7-a20dd400f6a3")
                        },
                        new
                        {
                            UserId = new Guid("c2d4c053-49b6-410c-bc78-2d54a9991870"),
                            RoleId = new Guid("6d9b7113-a8f8-6035-99a7-a20dd400f6a3")
                        },
                        new
                        {
                            UserId = new Guid("c3d4c053-49b6-410c-bc78-2d54a9991870"),
                            RoleId = new Guid("6d9b7113-a8f8-6035-99a7-a20dd400f6a3")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EasyLease.Entities.Models.Advert", b =>
                {
                    b.HasOne("EasyLease.Entities.Models.AdvertType", "AdvertType")
                        .WithMany()
                        .HasForeignKey("AdvertTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLease.Entities.Models.SettlementType", "SettlementType")
                        .WithMany()
                        .HasForeignKey("SettlementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLease.Entities.Models.StreetType", "StreetType")
                        .WithMany()
                        .HasForeignKey("StreetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLease.Entities.Models.User", "Author")
                        .WithMany("Adverts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLease.Entities.Models.Location", "Location")
                        .WithMany("Adverts")
                        .HasForeignKey("Region", "District")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyLease.Entities.Models.AdvertComfort", b =>
                {
                    b.HasOne("EasyLease.Entities.Models.Advert", "Advert")
                        .WithMany("AdvertComforts")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLease.Entities.Models.Comfort", "Comfort")
                        .WithMany("AdvertComforts")
                        .HasForeignKey("ComfortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyLease.Entities.Models.AdvertTag", b =>
                {
                    b.HasOne("EasyLease.Entities.Models.Advert", "Advert")
                        .WithMany("AdvertTags")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLease.Entities.Models.Tag", "Tag")
                        .WithMany("AdvertTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyLease.Entities.Models.FavoriteAdvert", b =>
                {
                    b.HasOne("EasyLease.Entities.Models.Advert", "Advert")
                        .WithMany("Subscribers")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLease.Entities.Models.User", "User")
                        .WithMany("FavoriteAdverts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyLease.Entities.Models.Image", b =>
                {
                    b.HasOne("EasyLease.Entities.Models.Advert", "Advert")
                        .WithMany("Images")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EasyLease.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EasyLease.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLease.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EasyLease.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
